{"ast":null,"code":"import _slicedToArray from \"/Users/work/www/flatiron/mod-6/rts-labs/hacker-news-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/work/www/flatiron/mod-6/rts-labs/hacker-news-redux/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport SearchForm from \"./components/SearchForm\";\nimport SearchResults from \"./components/SearchResults\";\nimport SearchHistory from \"./components/SearchHistory\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addQuery, removeQuery } from \"./actions\";\nimport \"./App.css\";\nconst numResults = 10,\n      API = \"http://hn.algolia.com/api/v1/search\",\n      TOP_STORIES = \"\".concat(API, \"?tags=front_page&hitsPerPage=\").concat(numResults),\n      LATEST_STORIES = \"\".concat(API, \"_by_date?tags=story&hitsPerPage=\").concat(numResults);\n\nconst App = () => {\n  const queries = useSelector(state => state.queries);\n  const dispatch = useDispatch();\n\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        stories = _useState2[0],\n        setStories = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isFetching = _useState4[0],\n        setIsFetching = _useState4[1];\n\n  const getStories = async request => {\n    setIsFetching(true); // Prevent double render of SearchResults\n\n    const stories = await fetch(request);\n    stories.json().then(stories => {\n      setStories(stories); // Allow SearchResults to render\n\n      setIsFetching(false);\n    });\n  }; // Fetch results of search and add query to Redux store\n\n\n  const search = query => {\n    getStories(\"\".concat(API, \"?query=\").concat(query, \"&tags=story&hitsPerPage=\").concat(numResults));\n    !queries.includes(query) && dispatch(addQuery(query));\n  }; // Remove a query from Redux store\n\n\n  const destroy = query => {\n    queries.includes(query) && dispatch(removeQuery(query));\n  }; // Load Top Stories when application mounts\n\n\n  useEffect(() => {\n    getStories(TOP_STORIES);\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: () => getStories(TOP_STORIES),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Top Stories\"), React.createElement(\"button\", {\n    onClick: () => getStories(LATEST_STORIES),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Latest Stories\"), React.createElement(SearchForm, {\n    search: search,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), !isFetching && stories.hits && React.createElement(SearchResults, {\n    stories: stories,\n    queries: queries,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(SearchHistory, {\n    queries: queries,\n    search: search,\n    destroy: destroy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/work/www/flatiron/mod-6/rts-labs/hacker-news-redux/src/App.js"],"names":["React","useState","useEffect","SearchForm","SearchResults","SearchHistory","useSelector","useDispatch","addQuery","removeQuery","numResults","API","TOP_STORIES","LATEST_STORIES","App","queries","state","dispatch","stories","setStories","isFetching","setIsFetching","getStories","request","fetch","json","then","search","query","includes","destroy","hits"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SearchForm from \"./components/SearchForm\";\nimport SearchResults from \"./components/SearchResults\";\nimport SearchHistory from \"./components/SearchHistory\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addQuery, removeQuery } from \"./actions\";\nimport \"./App.css\";\n\nconst numResults = 10,\n  API = \"http://hn.algolia.com/api/v1/search\",\n  TOP_STORIES = `${API}?tags=front_page&hitsPerPage=${numResults}`,\n  LATEST_STORIES = `${API}_by_date?tags=story&hitsPerPage=${numResults}`;\n\nconst App = () => {\n  const queries = useSelector(state => state.queries);\n  const dispatch = useDispatch();\n\n  const [stories, setStories] = useState({});\n  const [isFetching, setIsFetching] = useState(false);\n\n  const getStories = async request => {\n    setIsFetching(true); // Prevent double render of SearchResults\n    const stories = await fetch(request);\n    stories.json().then(stories => {\n      setStories(stories);\n      // Allow SearchResults to render\n      setIsFetching(false);\n    });\n  };\n\n  // Fetch results of search and add query to Redux store\n  const search = query => {\n    getStories(`${API}?query=${query}&tags=story&hitsPerPage=${numResults}`);\n    !queries.includes(query) && dispatch(addQuery(query));\n  };\n\n  // Remove a query from Redux store\n  const destroy = query => {\n    queries.includes(query) && dispatch(removeQuery(query));\n  };\n\n  // Load Top Stories when application mounts\n  useEffect(() => {\n    getStories(TOP_STORIES);\n  }, []);\n\n  return (\n    <>\n      <button onClick={() => getStories(TOP_STORIES)}>Top Stories</button>\n      <button onClick={() => getStories(LATEST_STORIES)}>Latest Stories</button>\n      <SearchForm search={search} />\n      <hr />\n      {!isFetching && stories.hits && (\n        <SearchResults stories={stories} queries={queries} />\n      )}\n      <SearchHistory queries={queries} search={search} destroy={destroy} />\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}